<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://fonts.googleapis.com/css2?family=Inconsolata:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Cdefs%3E%3ClinearGradient id='grad' x1='0%25' y1='0%25' x2='100%25' y2='100%25'%3E%3Cstop offset='0%25' style='stop-color:%232563eb;stop-opacity:1' /%3E%3Cstop offset='50%25' style='stop-color:%2316a34a;stop-opacity:1' /%3E%3Cstop offset='100%25' style='stop-color:%23ea580c;stop-opacity:1' /%3E%3C/linearGradient%3E%3C/defs%3E%3Crect width='32' height='32' rx='6' fill='url(%23grad)'/%3E%3Ctext x='16' y='22' font-family='system-ui,-apple-system,sans-serif' font-size='16' font-weight='500' text-anchor='middle' fill='white'%3EN%3C/text%3E%3C/svg%3E">
    
    <title>AI Expense Assistant - Navajit D</title>
    
    <script src="https://accounts.google.com/gsi/client" async defer></script>
    <style>
        /* Dark Mode Base Styles */
        :root {
            --text-color: #e5e7eb;
            --bg-color: #111827;
            --surface-color: #1f2937;
            --accent-color: #3b82f6;
            --muted-color: #9ca3af;
            --border-color: #374151;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --error-color: #ef4444;
            --font-sans: "Inconsolata", monospace;
        }
        
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        
        html {
            font-size: 16px;
        }
        
        body {
            font-family: var(--font-sans);
            color: var(--text-color);
            background-color: var(--bg-color);
            line-height: 1.65;
            max-width: 48rem;
            margin: 0 auto;
            padding: 3rem 1.5rem;
            min-height: 100vh;
        }
        
        a {
            color: var(--accent-color);
            text-decoration: none;
        }
        
        a:hover {
            text-decoration: underline;
        }
        
        p {
            margin-bottom: 1.5rem;
        }
        
        /* Header Styles */
        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 3rem;
        }
        
        .logo {
            font-weight: 600;
            font-size: 1rem;
            color: var(--text-color);
        }
        
        .logo a {
            color: var(--text-color);
        }
        
        .logo a:hover {
            color: var(--accent-color);
            text-decoration: none;
        }
        
        nav ul {
            display: flex;
            gap: 1.5rem;
            list-style: none;
        }
        
        nav a {
            color: var(--text-color);
            font-size: 1rem;
        }
        
        nav a:hover {
            color: var(--accent-color);
            text-decoration: none;
        }
        
        .sign-out-link {
            color: var(--text-color);
            cursor: pointer;
            border: none;
            background: none;
            font: inherit;
            font-size: 1rem;
            padding: 0;
        }
        
        .sign-out-link:hover {
            color: var(--accent-color);
            text-decoration: none;
        }
        
        /* Authentication */
        .auth-container {
            text-align: center;
            padding: 4rem 0;
            background: var(--surface-color);
            border-radius: 12px;
            border: 1px solid var(--border-color);
            margin: 2rem 0;
        }
        
        .auth-title {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 1rem;
            color: var(--text-color);
        }
        
        .auth-description {
            color: var(--muted-color);
            margin-bottom: 2rem;
            font-size: 1.125rem;
        }
        
        #g_id_signin {
            display: inline-block;
            margin: 0 auto;
        }
        
        /* Page Header */
        .page-header {
            margin-bottom: 3rem;
        }
        
        .page-title {
            font-size: 2rem;
            line-height: 1.3;
            font-weight: 700;
            margin-bottom: 1rem;
            color: var(--text-color);
        }
        
        .page-description {
            font-size: 1.125rem;
            color: var(--muted-color);
        }
        
        /* Navigation Pills */
        .nav-pills {
            display: flex;
            gap: 1rem;
            margin-bottom: 3rem;
            padding: 0.5rem;
            background: var(--surface-color);
            border-radius: 8px;
            border: 1px solid var(--border-color);
        }
        
        .nav-pill {
            flex: 1;
            padding: 0.75rem 1rem;
            text-align: center;
            background: transparent;
            color: var(--muted-color);
            text-decoration: none;
            border-radius: 6px;
            transition: all 0.2s;
            font-family: inherit;
            font-size: 0.875rem;
            font-weight: 500;
        }
        
        .nav-pill:hover {
            background: var(--border-color);
            color: var(--text-color);
            text-decoration: none;
        }
        
        .nav-pill.active {
            background: var(--accent-color);
            color: white;
        }
        
        /* Chat Container */
        .chat-container {
            background: var(--surface-color);
            border: 1px solid var(--border-color);
            border-radius: 12px;
            overflow: hidden;
            height: 70vh;
            display: flex;
            flex-direction: column;
        }
        
        .chat-header {
            padding: 1rem 1.5rem;
            background: var(--accent-color);
            color: white;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .chat-status {
            font-size: 0.875rem;
            opacity: 0.9;
        }
        
        .chat-messages {
            flex: 1;
            padding: 1.5rem;
            overflow-y: auto;
            background: var(--bg-color);
        }
        
        .message {
            margin-bottom: 1.5rem;
            display: flex;
            gap: 0.75rem;
        }
        
        .message.user {
            flex-direction: row-reverse;
        }
        
        .message-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.875rem;
            font-weight: 600;
            flex-shrink: 0;
        }
        
        .message.ai .message-avatar {
            background: var(--accent-color);
            color: white;
        }
        
        .message.user .message-avatar {
            background: var(--success-color);
            color: white;
        }
        
        .message-content {
            flex: 1;
            max-width: 80%;
        }
        
        .message-bubble {
            padding: 0.75rem 1rem;
            border-radius: 12px;
            font-size: 0.9rem;
            line-height: 1.5;
        }
        
        .message.ai .message-bubble {
            background: var(--surface-color);
            border: 1px solid var(--border-color);
            color: var(--text-color);
        }
        
        .message.user .message-bubble {
            background: var(--accent-color);
            color: white;
        }
        
        .message-time {
            font-size: 0.75rem;
            color: var(--muted-color);
            margin-top: 0.25rem;
        }
        
        .message.user .message-time {
            text-align: right;
        }
        
        /* Chat Input */
        .chat-input-container {
            padding: 1rem 1.5rem;
            background: var(--surface-color);
            border-top: 1px solid var(--border-color);
        }
        
        .chat-input {
            display: flex;
            gap: 0.75rem;
            align-items: flex-end;
        }
        
        .input-wrapper {
            flex: 1;
            position: relative;
        }
        
        .chat-textarea {
            width: 100%;
            background: var(--bg-color);
            color: var(--text-color);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 0.75rem;
            font-family: inherit;
            font-size: 0.9rem;
            resize: none;
            min-height: 44px;
            max-height: 120px;
        }
        
        .chat-textarea:focus {
            outline: none;
            border-color: var(--accent-color);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }
        
        .send-button {
            background: var(--accent-color);
            color: white;
            border: none;
            padding: 0.75rem 1rem;
            border-radius: 8px;
            font-family: inherit;
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s;
            min-width: 80px;
        }
        
        .send-button:hover:not(:disabled) {
            background: #2563eb;
        }
        
        .send-button:disabled {
            background: var(--muted-color);
            cursor: not-allowed;
        }
        
        /* Quick Actions */
        .quick-actions {
            margin-bottom: 2rem;
        }
        
        .quick-actions-title {
            font-size: 1rem;
            font-weight: 600;
            margin-bottom: 1rem;
            color: var(--text-color);
        }
        
        .quick-actions-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 0.75rem;
        }
        
        .quick-action {
            background: var(--surface-color);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 0.75rem;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 0.875rem;
            color: var(--text-color);
        }
        
        .quick-action:hover {
            background: var(--border-color);
            border-color: var(--accent-color);
        }
        
        .quick-action-title {
            font-weight: 600;
            margin-bottom: 0.25rem;
        }
        
        .quick-action-desc {
            color: var(--muted-color);
            font-size: 0.8rem;
        }
        
        /* Typing Indicator */
        .typing-indicator {
            display: none;
            padding: 1rem;
            color: var(--muted-color);
            font-style: italic;
            font-size: 0.875rem;
        }
        
        .typing-dots {
            display: inline-block;
            animation: typing 1.4s infinite;
        }
        
        @keyframes typing {
            0%, 60% { opacity: 0; }
            30% { opacity: 1; }
        }
        
        /* Responsive */
        @media (max-width: 768px) {
            .nav-pills {
                flex-direction: column;
                gap: 0.5rem;
            }
            
            .quick-actions-grid {
                grid-template-columns: 1fr;
            }
            
            .chat-container {
                height: 60vh;
            }
        }
        
        @media (max-width: 640px) {
            body {
                padding: 2rem 1rem;
            }
            
            header {
                flex-direction: column;
                gap: 1rem;
                align-items: flex-start;
            }
            
            nav ul {
                gap: 1rem;
            }
            
            .page-title {
                font-size: 1.75rem;
            }
            
            .message-content {
                max-width: 90%;
            }
        }
        
        /* Hidden class */
        .hidden {
            display: none !important;
        }
    </style>
</head>
<body>
    <!-- Auth Screen -->
    <div id="auth-screen">
        <header>
            <div class="logo">
                <a href="/">Navajit D</a>
            </div>
        </header>
        
        <div class="auth-container">
            <h1 class="auth-title">AI Expense Assistant</h1>
            <p class="auth-description">Sign in to chat with your AI expense advisor</p>
            
            <div id="g_id_signin" 
                 data-client_id="1010970898291-q8nv22u1mbbv3mjvso048dcmsip8l9ev.apps.googleusercontent.com"
                 data-callback="handleCredentialResponse"
                 data-auto_prompt="false"
                 data-cancel_on_tap_outside="false"
                 data-theme="outline"
                 data-size="large"
                 data-text="signin_with"
                 data-shape="rectangular"
                 data-logo_alignment="left">
            </div>
        </div>
    </div>

    <!-- Main App -->
    <div id="app" class="hidden">
        <header>
            <div class="logo">
                <a href="/">Navajit D</a>
            </div>
            <nav>
                <ul>
                    <li><a href="#" class="sign-out-link" onclick="signOut()">Sign Out</a></li>
                </ul>
            </nav>
        </header>
        
        <div class="page-header">
            <h1 class="page-title">🤖 AI Expense Assistant</h1>
            <p class="page-description">Get personalized insights and strategic advice about your spending habits.</p>
        </div>
        
        <!-- Navigation Pills -->
        <div class="nav-pills">
            <a href="/expenses.html" class="nav-pill">Add Expense</a>
            <a href="/expense-analytics.html" class="nav-pill">Analytics</a>
            <a href="/expense-chat.html" class="nav-pill active">AI Assistant</a>
        </div>
        
        <!-- Quick Actions -->
        <div class="quick-actions">
            <h3 class="quick-actions-title">Quick Questions</h3>
            <div class="quick-actions-grid">
                <div class="quick-action" onclick="sendQuickMessage('What are my biggest expense categories this month?')">
                    <div class="quick-action-title">💳 Category Breakdown</div>
                    <div class="quick-action-desc">See where your money is going this month</div>
                </div>
                <div class="quick-action" onclick="sendQuickMessage('How can I reduce my dining out expenses?')">
                    <div class="quick-action-title">🍽️ Reduce Dining Out</div>
                    <div class="quick-action-desc">Get tips to cut restaurant spending</div>
                </div>
                <div class="quick-action" onclick="sendQuickMessage('Show me my spending trends over the last 3 months')">
                    <div class="quick-action-title">📈 Spending Trends</div>
                    <div class="quick-action-desc">Analyze your expense patterns</div>
                </div>
                <div class="quick-action" onclick="sendQuickMessage('What is my average weekly grocery spending?')">
                    <div class="quick-action-title">🛒 Grocery Analysis</div>
                    <div class="quick-action-desc">Review your grocery spending habits</div>
                </div>
                <div class="quick-action" onclick="sendQuickMessage('How much am I spending compared to last month?')">
                    <div class="quick-action-title">📊 Month Comparison</div>
                    <div class="quick-action-desc">Compare current vs previous month</div>
                </div>
                <div class="quick-action" onclick="sendQuickMessage('Give me 3 actionable tips to save money based on my spending')">
                    <div class="quick-action-title">💡 Money Saving Tips</div>
                    <div class="quick-action-desc">Personalized saving strategies</div>
                </div>
            </div>
        </div>
        
        <!-- Chat Container -->
        <div class="chat-container">
            <div class="chat-header">
                <span>💬</span>
                <span>AI Expense Advisor</span>
                <div class="chat-status" id="chat-status">Ready to help</div>
            </div>
            
            <div class="chat-messages" id="chat-messages">
                <!-- Welcome message -->
                <div class="message ai">
                    <div class="message-avatar">🤖</div>
                    <div class="message-content">
                        <div class="message-bubble">
                            👋 Hello! I'm your AI expense advisor. I can help you analyze your spending patterns, identify areas to save money, and answer questions about your expenses.
                            <br><br>
                            I have access to your expense data and can provide insights on:
                            <br>• Category breakdowns and trends
                            <br>• Spending comparisons over time  
                            <br>• Personalized money-saving recommendations
                            <br>• Budget optimization strategies
                            <br><br>
                            Try the quick questions above or ask me anything about your expenses!
                        </div>
                        <div class="message-time" id="welcome-time"></div>
                    </div>
                </div>
            </div>
            
            <div class="typing-indicator" id="typing-indicator">
                <span class="typing-dots">AI is thinking...</span>
            </div>
            
            <div class="chat-input-container">
                <div class="chat-input">
                    <div class="input-wrapper">
                        <textarea 
                            id="chat-textarea"
                            class="chat-textarea" 
                            placeholder="Ask me about your expenses..."
                            rows="1"
                            maxlength="500"></textarea>
                    </div>
                    <button id="send-button" class="send-button">Send</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let expenses = [];
        let userEmail = null;
        
        // Google Apps Script URL
        const APPS_SCRIPT_URL = "https://script.google.com/macros/s/AKfycbwISgM-mNsc6fZmKki2ImDKhsePg_Ixbcku3Ofw9_feNE9OuDUEDamLylrwK5kLB7vGZg/exec";
        
        // Initialize Google Sign-In
        window.onload = function() {
            if (typeof google !== 'undefined' && google.accounts && google.accounts.id) {
                google.accounts.id.initialize({
                    client_id: '1010970898291-q8nv22u1mbbv3mjvso048dcmsip8l9ev.apps.googleusercontent.com',
                    callback: handleCredentialResponse,
                    auto_select: false,
                    cancel_on_tap_outside: false
                });
                
                google.accounts.id.renderButton(
                    document.getElementById('g_id_signin'),
                    {
                        theme: 'outline',
                        size: 'large',
                        text: 'signin_with',
                        shape: 'rectangular',
                        logo_alignment: 'left'
                    }
                );
            }
            
            // Set welcome message time
            document.getElementById('welcome-time').textContent = new Date().toLocaleTimeString('en-US', { 
                hour: '2-digit', 
                minute: '2-digit' 
            });
        };
        
        // Handle Google Sign-In
        window.handleCredentialResponse = function(response) {
            const responsePayload = decodeJwtResponse(response.credential);
            
            if (responsePayload.email === 'navjitdebnath5@gmail.com') {
                userEmail = responsePayload.email;
                document.getElementById('auth-screen').classList.add('hidden');
                document.getElementById('app').classList.remove('hidden');
                initializeApp();
            } else {
                alert('Access denied. This AI assistant is restricted to authorized users only.');
                signOut();
            }
        };
        
        function decodeJwtResponse(token) {
            const base64Url = token.split('.')[1];
            const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
            const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
            }).join(''));
            return JSON.parse(jsonPayload);
        }
        
        window.signOut = function() {
            userEmail = null;
            document.getElementById('auth-screen').classList.remove('hidden');
            document.getElementById('app').classList.add('hidden');
            if (typeof google !== 'undefined' && google.accounts && google.accounts.id) {
                google.accounts.id.disableAutoSelect();
            }
        };
        
        // Initialize app
        async function initializeApp() {
            await loadExpenseData();
            setupChatInterface();
        }
        
        // Load expense data
        async function loadExpenseData() {
            try {
                const response = await fetch(APPS_SCRIPT_URL);
                const result = await response.json();
                
                if (result.data) {
                    expenses = result.data.sort((a, b) => new Date(b.date) - new Date(a.date));
                }
            } catch (error) {
                console.error('Error loading data:', error);
            }
        }
        
        // Setup chat interface
        function setupChatInterface() {
            const textarea = document.getElementById('chat-textarea');
            const sendButton = document.getElementById('send-button');
            
            // Auto-resize textarea
            textarea.addEventListener('input', function() {
                this.style.height = 'auto';
                this.style.height = Math.min(this.scrollHeight, 120) + 'px';
            });
            
            // Send message on Enter (but allow Shift+Enter for new lines)
            textarea.addEventListener('keydown', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });
            
            // Send button click
            sendButton.addEventListener('click', sendMessage);
        }
        
        // Send message
        function sendMessage() {
            const textarea = document.getElementById('chat-textarea');
            const message = textarea.value.trim();
            
            if (!message) return;
            
            // Add user message to chat
            addMessage(message, 'user');
            
            // Clear input
            textarea.value = '';
            textarea.style.height = 'auto';
            
            // Show typing indicator and process message
            showTypingIndicator();
            setTimeout(() => {
                const response = processAIQuery(message);
                hideTypingIndicator();
                addMessage(response, 'ai');
            }, 1500); // Simulate AI thinking time
        }
        
        // Send quick message
        function sendQuickMessage(message) {
            const textarea = document.getElementById('chat-textarea');
            textarea.value = message;
            sendMessage();
        }
        
        // Add message to chat
        function addMessage(content, type) {
            const chatMessages = document.getElementById('chat-messages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${type}`;
            
            const avatar = type === 'ai' ? '🤖' : '👤';
            const time = new Date().toLocaleTimeString('en-US', { 
                hour: '2-digit', 
                minute: '2-digit' 
            });
            
            messageDiv.innerHTML = `
                <div class="message-avatar">${avatar}</div>
                <div class="message-content">
                    <div class="message-bubble">${content}</div>
                    <div class="message-time">${time}</div>
                </div>
            `;
            
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        // Show typing indicator
        function showTypingIndicator() {
            document.getElementById('typing-indicator').style.display = 'block';
            document.getElementById('chat-status').textContent = 'Analyzing your data...';
            document.getElementById('send-button').disabled = true;
        }
        
        // Hide typing indicator
        function hideTypingIndicator() {
            document.getElementById('typing-indicator').style.display = 'none';
            document.getElementById('chat-status').textContent = 'Ready to help';
            document.getElementById('send-button').disabled = false;
        }
        
        // Process AI query (enhanced version with more intelligence)
        function processAIQuery(query) {
            const lowerQuery = query.toLowerCase();
            
            // Calculate current month stats
            const now = new Date();
            const currentMonth = now.getMonth();
            const currentYear = now.getFullYear();
            
            const thisMonthExpenses = expenses.filter(expense => {
                const expenseDate = new Date(expense.date);
                return expenseDate.getMonth() === currentMonth && expenseDate.getFullYear() === currentYear;
            });
            
            const lastMonthExpenses = expenses.filter(expense => {
                const expenseDate = new Date(expense.date);
                const lastMonth = currentMonth === 0 ? 11 : currentMonth - 1;
                const lastMonthYear = currentMonth === 0 ? currentYear - 1 : currentYear;
                return expenseDate.getMonth() === lastMonth && expenseDate.getFullYear() === lastMonthYear;
            });
            
            const totalSpent = thisMonthExpenses.reduce((sum, expense) => sum + parseFloat(expense.amount || 0), 0);
            const lastMonthTotal = lastMonthExpenses.reduce((sum, expense) => sum + parseFloat(expense.amount || 0), 0);
            
            // Category analysis
            if (lowerQuery.includes('category') || lowerQuery.includes('breakdown') || lowerQuery.includes('biggest')) {
                const categoryTotals = {};
                thisMonthExpenses.forEach(expense => {
                    const category = expense.category;
                    categoryTotals[category] = (categoryTotals[category] || 0) + parseFloat(expense.amount || 0);
                });
                
                const sortedCategories = Object.entries(categoryTotals)
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 5);
                
                if (sortedCategories.length === 0) {
                    return "You haven't recorded any expenses this month yet. Start by adding some expenses to see your spending breakdown!";
                }
                
                let response = `📊 <strong>Your top spending categories this month:</strong><br><br>`;
                sortedCategories.forEach(([category, amount], index) => {
                    const percentage = ((amount / totalSpent) * 100).toFixed(1);
                    response += `${index + 1}. <strong>${category}</strong>: ₹${amount.toFixed(0)} (${percentage}%)<br>`;
                });
                
                const topCategory = sortedCategories[0];
                response += `<br>💡 <strong>Insight:</strong> ${topCategory[0]} is your largest expense category. Consider reviewing these transactions to identify potential savings.`;
                
                return response;
            }
            
            // Dining out specific advice
            if (lowerQuery.includes('dining') || lowerQuery.includes('eating out') || lowerQuery.includes('restaurant')) {
                const diningExpenses = thisMonthExpenses.filter(expense => 
                    expense.category === 'Eating out'
                );
                const diningTotal = diningExpenses.reduce((sum, expense) => sum + parseFloat(expense.amount || 0), 0);
                const avgPerMeal = diningExpenses.length > 0 ? diningTotal / diningExpenses.length : 0;
                
                if (diningTotal === 0) {
                    return "🍽️ Great news! You haven't spent anything on dining out this month. You're doing an excellent job cooking at home!";
                }
                
                return `🍽️ <strong>Dining Out Analysis:</strong><br><br>This month: ₹${diningTotal.toFixed(0)} across ${diningExpenses.length} meals<br>Average per meal: ₹${avgPerMeal.toFixed(0)}<br><br><strong>💡 Money-saving tips:</strong><br>• Try meal prepping on weekends<br>• Set a weekly dining budget of ₹${(diningTotal * 0.7).toFixed(0)}<br>• Choose lunch specials over dinner<br>• Cook one extra meal at home per week to save ~₹${avgPerMeal.toFixed(0)}`;
            }
            
            // Month comparison
            if (lowerQuery.includes('compared to last month') || lowerQuery.includes('month comparison')) {
                const difference = totalSpent - lastMonthTotal;
                const percentChange = lastMonthTotal > 0 ? ((difference / lastMonthTotal) * 100) : 0;
                
                let changeText, emoji, advice;
                if (difference > 0) {
                    changeText = `₹${difference.toFixed(0)} more (+${percentChange.toFixed(1)}%)`;
                    emoji = '📈';
                    advice = difference > 1000 ? 
                        "This is a significant increase. Review your recent purchases to identify any unusual expenses." :
                        "This is a moderate increase. Keep an eye on your spending for the rest of the month.";
                } else if (difference < 0) {
                    changeText = `₹${Math.abs(difference).toFixed(0)} less (${percentChange.toFixed(1)}%)`;
                    emoji = '📉';
                    advice = "Great job reducing your expenses! Keep up the good work.";
                } else {
                    changeText = "exactly the same";
                    emoji = '📊';
                    advice = "Your spending is consistent month-to-month.";
                }
                
                return `${emoji} <strong>Month-over-Month Comparison:</strong><br><br>This month: ₹${totalSpent.toFixed(0)}<br>Last month: ₹${lastMonthTotal.toFixed(0)}<br>Difference: ${changeText}<br><br>💡 <strong>Insight:</strong> ${advice}`;
            }
            
            // Spending trends
            if (lowerQuery.includes('trend') || lowerQuery.includes('pattern') || lowerQuery.includes('3 months')) {
                const last3MonthsExpenses = expenses.filter(expense => {
                    const expenseDate = new Date(expense.date);
                    const threeMonthsAgo = new Date(now.getTime() - (90 * 24 * 60 * 60 * 1000));
                    return expenseDate >= threeMonthsAgo;
                });
                
                const monthlyTotals = {};
                last3MonthsExpenses.forEach(expense => {
                    const date = new Date(expense.date);
                    const monthKey = `${date.getFullYear()}-${date.getMonth()}`;
                    monthlyTotals[monthKey] = (monthlyTotals[monthKey] || 0) + parseFloat(expense.amount || 0);
                });
                
                const avgDailySpending = totalSpent / now.getDate();
                const projectedMonthly = avgDailySpending * 30;
                
                return `📈 <strong>Spending Trends (Last 3 Months):</strong><br><br>Current month: ₹${totalSpent.toFixed(0)}<br>Average daily: ₹${avgDailySpending.toFixed(0)}<br>Projected monthly: ₹${projectedMonthly.toFixed(0)}<br><br>💡 <strong>Trend insight:</strong> You're ${projectedMonthly > totalSpent ? 'on pace for' : 'slightly below'} your current spending rate. ${projectedMonthly > 15000 ? 'Consider setting weekly budgets to better control spending.' : 'Your spending habits look well-controlled.'}`;
            }
            
            // Grocery spending
            if (lowerQuery.includes('grocery') || lowerQuery.includes('groceries')) {
                const groceryExpenses = thisMonthExpenses.filter(expense => 
                    expense.category === 'Groceries'
                );
                const groceryTotal = groceryExpenses.reduce((sum, expense) => sum + parseFloat(expense.amount || 0), 0);
                const avgGrocerySpending = groceryExpenses.length > 0 ? groceryTotal / groceryExpenses.length : 0;
                
                // Calculate weekly average
                const weeksInMonth = Math.ceil(now.getDate() / 7);
                const weeklyAverage = groceryTotal / weeksInMonth;
                
                if (groceryTotal === 0) {
                    return "🛒 I don't see any grocery expenses recorded this month. Don't forget to log your grocery shopping!";
                }
                
                return `🛒 <strong>Grocery Spending Analysis:</strong><br><br>This month: ₹${groceryTotal.toFixed(0)} across ${groceryExpenses.length} trips<br>Average per trip: ₹${avgGrocerySpending.toFixed(0)}<br>Weekly average: ₹${weeklyAverage.toFixed(0)}<br><br>💡 <strong>Optimization tips:</strong><br>• Plan meals before shopping to avoid impulse buys<br>• Shop with a list to stay focused<br>• Buy in bulk for non-perishables<br>• Consider ₹${(weeklyAverage * 0.9).toFixed(0)} as your weekly target`;
            }
            
            // Money saving tips
            if (lowerQuery.includes('save money') || lowerQuery.includes('saving tips') || lowerQuery.includes('actionable tips')) {
                const categoryTotals = {};
                thisMonthExpenses.forEach(expense => {
                    const category = expense.category;
                    categoryTotals[category] = (categoryTotals[category] || 0) + parseFloat(expense.amount || 0);
                });
                
                const sortedCategories = Object.entries(categoryTotals)
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 3);
                
                if (sortedCategories.length === 0) {
                    return "💡 Start by tracking your expenses regularly to identify saving opportunities!";
                }
                
                const tips = [];
                sortedCategories.forEach(([category, amount]) => {
                    const savings = (amount * 0.15).toFixed(0);
                    switch (category) {
                        case 'Eating out':
                            tips.push(`Cook 2 more meals at home per week (save ~₹${savings})`);
                            break;
                        case 'Groceries':
                            tips.push(`Use a shopping list and buy generic brands (save ~₹${savings})`);
                            break;
                        case 'Entertainment':
                            tips.push(`Try free activities like parks or free events (save ~₹${savings})`);
                            break;
                        case 'Auto/Cab':
                            tips.push(`Use public transport 2 days a week (save ~₹${savings})`);
                            break;
                        default:
                            tips.push(`Review ${category} expenses for unnecessary items (save ~₹${savings})`);
                    }
                });
                
                const totalPotentialSavings = sortedCategories.reduce((sum, [,amount]) => sum + (amount * 0.15), 0);
                
                return `💡 <strong>Personalized Money-Saving Tips:</strong><br><br>${tips.map((tip, i) => `${i + 1}. ${tip}`).join('<br>')}<br><br><strong>Potential monthly savings: ₹${totalPotentialSavings.toFixed(0)}</strong><br><br>🎯 <strong>Pro tip:</strong> Start with the easiest change and build momentum!`;
            }
            
            // General help
            if (lowerQuery.includes('help') || lowerQuery.includes('what can you do')) {
                return `🤖 <strong>I can help you with:</strong><br><br>• Analyzing spending by category<br>• Comparing months and identifying trends<br>• Providing personalized money-saving tips<br>• Reviewing specific expense categories<br>• Calculating averages and projections<br>• Suggesting budget optimization strategies<br><br>💬 Try asking specific questions about your expenses, or use the quick questions above!`;
            }
            
            // Default intelligent response
            const insights = [];
            if (totalSpent > 0) {
                insights.push(`You've spent ₹${totalSpent.toFixed(0)} this month across ${thisMonthExpenses.length} transactions`);
                
                if (lastMonthTotal > 0) {
                    const change = ((totalSpent - lastMonthTotal) / lastMonthTotal * 100);
                    if (Math.abs(change) > 5) {
                        insights.push(`That's ${change > 0 ? 'a' : 'a'} ${Math.abs(change).toFixed(1)}% ${change > 0 ? 'increase' : 'decrease'} from last month`);
                    }
                }
                
                const avgDaily = totalSpent / now.getDate();
                insights.push(`Your daily average is ₹${avgDaily.toFixed(0)}`);
            }
            
            return `I understand you're asking about "${query}". ${insights.length > 0 ? insights.join('. ') + '. ' : ''}Is there a specific aspect of your spending you'd like me to analyze? Try asking about categories, trends, or saving tips!`;
        }
    </script>
</body>
</html>
